using System;
using System.Collections.Concurrent;
using System.Collections.Generic;

using Newtonsoft.Json;

using api = SteamControllerApi;
using Robot;


namespace Backend {
	public abstract class Hardware {
		[JsonIgnore]
		protected static IRobot robot = new WindowsRobot(false);

		protected static EventDoer EventDoer => eventDoer ?? throw new InvalidOperationException(
			"Hardware has yet to be initialized; call Hardware.Init().");

		private static EventDoer? eventDoer;

		public static void Init(bool createVirtualGamepad, EventDoer eventDoer) {
			robot = new WindowsRobot(createVirtualGamepad);
			Hardware.eventDoer = eventDoer;
		}

		///<summary>Takes an input event generated by the steam controller and 
		///generates input by way of the state of the hardware object.</summary>
		public abstract void DoEvent(api.IInputData input);

		///<summary>Defines what to do when the hardware object is no longer needed and
		/// needs to clean up.</summary>
		public abstract void ReleaseAll();

		///<summary>Defines what to do when an object whose containing layer on the action layer list was revealed
		/// after being hidden.</summary>
		public abstract void Unfreeze(api.IInputData newInput);

		/// <summary>r is the range of a signed short, angle is between -PI and PI.</summary>
		protected (double r, double theta) CartesianToPolar(int x, int y) {
			double r = Math.Sqrt(x * x + y * y);
			double theta = Double.NaN;
			if (y >= 0 && r != 0) theta = Math.Acos(x / r);
			else if (y < 0)       theta = -Math.Acos(x / r);
			else if (r == 0)      theta = Double.NaN;
			return (r, theta);
		}

		protected (double r, double cos, double sin) CartesianToAngle(int x, int y) {
			double r = Math.Sqrt(x * x + y * y);
			return (r, x / r, y / r);
		}
	}
}